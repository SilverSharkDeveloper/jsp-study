package test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class Test {
	public static void main(String[] args) {
		int[] arInt = { 1, 2, 3 };
		String[] arStr = {};
		List<Integer> intList = new ArrayList<>();
		List<Integer> intList2 = new ArrayList<>();

		int answer = 0;
		int[][] arr = { { 0, 1 }, { 2, 5 }, { 3, 9 } };
		int[] ar12 = IntStream.rangeClosed(arr[0][0], arr[0][1])
				.filter(i -> IntStream.rangeClosed(arr[1][0], arr[1][1]).anyMatch(v -> v == i)).toArray();
		int[] ar13 = IntStream.rangeClosed(arr[0][0], arr[0][1])
				.filter(i -> IntStream.rangeClosed(arr[2][0], arr[2][1]).anyMatch(v -> v == i)).toArray();
		int[] ar23 = IntStream.rangeClosed(arr[1][0], arr[1][1])
				.filter(i -> IntStream.rangeClosed(arr[2][0], arr[2][1]).anyMatch(v -> v == i)).toArray();
		int[] ar123 = IntStream.rangeClosed(arr[0][0], arr[0][1])
				.filter(i -> IntStream.rangeClosed(arr[1][0], arr[1][1]).anyMatch(v -> v == i))
				.filter(j -> IntStream.rangeClosed(arr[2][0], arr[2][1]).anyMatch(k -> k == j)).toArray();

		if (ar12.length > 1) {
			answer += ar12[ar12.length - 1] - ar12[0];
		}
		if (ar13.length > 1) {
			answer += ar13[ar13.length - 1] - ar13[0];
		}
		if (ar23.length > 1) {
			answer += ar23[ar23.length - 1] - ar23[0];
		}
		if (ar123.length > 1) {
			answer -= (ar123[ar123.length - 1] - ar123[0]) * 2;
		}

		System.out.println(6 / 8.0 == 3 / 4.0);
		System.out.println("dsdd");
		int count = 0;

		String[] babbling = { "aya", "yee", "u", "maa", "wyeoo" };
		String[] baby = { "aya", "ye", "woo", "ma" };
		for (int i = 0; i < babbling.length; i++) {
			for (String str : baby) {
				if (babbling[i].indexOf(str) == babbling[i].lastIndexOf(str) && babbling[i].indexOf(str) != -1) {
					babbling[i] = babbling[i].replace(str, "*");
				}
			}
			babbling[i] = babbling[i].replace("*", "");
			System.out.println(babbling[i]);
			if (babbling[i].length() == 0) {
				count++;
			}
		}
		Collections.reverse(intList2);

		Collections.reverse(Arrays.stream(String.valueOf(123).split("")).map(i -> Integer.parseInt(i))
				.collect(Collectors.toList()));

		if (Math.sqrt(5) * Math.sqrt(5) == 5) {
			System.out.println(Math.sqrt(5));
		}
		System.out.println(1 / 3.0);
		System.out.println(3.0 * 3.0 == 9);
		Long.parseLong(Arrays.stream(String.valueOf(342).split("")).map(i -> Integer.parseInt(i))
				.sorted(Collections.reverseOrder()).map(i -> i.toString()).collect(Collectors.joining()));
		String.valueOf(5).chars().map(i -> i-'0').mapToLong(i -> i).sum();
		System.out.println(solution(626331));
		
	}
	 public static int solution(int num) {
	        if(num==1){return 0;}
	        for(int i = 1 ; i<=500 ; i++){
	            if(num%2==0){
	                num/=2;
	            }else{
	                num= num*3+1;
	            }
	            if(num==1){return i;}
	        }
	        return -1;
	    }
}
